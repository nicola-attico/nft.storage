<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_openapi_operation">
    <sys_openapi_operation action="INSERT_OR_UPDATE">
        <complex_object_ids>9c77862297a74910e47578971153af38,5077862297a74910e47578971153af37,dc774a2297a74910e47578971153af5d,5077862297a74910e47578971153af33,18774a2297a74910e47578971153af58,90774a2297a74910e47578971153af5c,1477862297a74910e47578971153af35,54774a2297a74910e47578971153af5a,d8774a2297a74910e47578971153af56</complex_object_ids>
        <deprecated>false</deprecated>
        <http_method>post</http_method>
        <name>Store an ERC-1155 compatible NFT</name>
        <openapi display_value="NFT Storage API - 1.0">0c77862297a74910e47578971153af30</openapi>
        <path>/store</path>
        <serialized_operation>{"fName":"Store an ERC-1155 compatible NFT","fOperationId":"store","fDescription":"Store an [ERC-1155](https://eips.ethereum.org/EIPS/eip-1155)-compatible NFT as \na collection of content-addressed objects connected by IPFS CID links.\n\nThe POST request accepts `multipart/form-data` content restricted to a body size of 100MB (see \"Size limitations\" below for more information). The request must contain a form field named `meta`.\n\nThe `meta` field must contain a JSON string that conforms to the [ERC-1155 metadata schema](https://eips.ethereum.org/EIPS/eip-1155#metadata).\n\nAny field(s) inside the `meta` object can be substituted with an ipfs URL to a file(s), by providing a form data field with a name matching a (`.` delimited) property path and value containing the file content (in binary string or plain text depending on file format).\n\nThe name of the form data field containing the file content should be the \"path\" of the JSON field, using `.` to traverse nested\nobjects.\n\nFor example, with a `meta` object of the form:\n\n  ```json\n  {\n    \"name\": \"Hello\",\n    \"image\": undefined,\n    \"properties\": {\n      \"videoClip\": undefined\n    }\n  }\n  ```\n\nYou must include form fields named `image` and `properties.videoClip` in your request body, with the content of the image and video files as the form field values.\n\nAll form fields other than `meta` must contain binary file data, and the field name will be used as a \u0027.\u0027 delimited property path for the `meta` object, as described above. If the form field name matches a `meta` property with a non-falsy value, the request will be rejected with an error.\n\n### Mime Type Recommendations\n\nThe ERC-1155 metadata standard specifies that the `image` metadata field should reference a file with a content type of `image/*`.\nAn earlier version of this API enforced this as a requirement, but this proved to be incompatible with some existing systems and the\nrequirement was relaxed, although you may see a warning when using the official JavaScript client.\n\nWe highly recommend that you only use content with an `image/*` content type for your `image` field, and include other content types in the\n`properties` field as additional references.\n\n### Size limitations\n\nThe store endpoint is restricted to a total request body size of 100MB, which includes the metadata and all attached files. To store larger files, you\ncan use the /upload endpoint with chunked CAR files (see \"/upload\").\n\n### Rate limits\n\nThis API imposes rate limits to ensure quality of service. You may receive a 429 \"Too many requests\" error if you make more than 30 requests with the same API token within a 10 second window. Upon receiving a response with a 429 status, clients should retry the failed request after a small delay. To avoid 429 responses, you may wish to implement client-side request throttling to stay within the limits (note: the JS client automatically does this).\n","fPath":"/store","fHttpMethod":"POST","fDeprecated":false,"fRequest":{"fRequired":true,"fContents":[{"fMediaType":"multipart/form-data","fSchema":{"fName":"requestmultipartformdata6143095047","fExclusiveMaximum":false,"fExclusiveMinimum":false,"fUniqueItems":false,"fRequired":[],"fEnum":[],"fType":"object","fProperties":[{"fName":"meta","fExclusiveMaximum":false,"fExclusiveMinimum":false,"fUniqueItems":false,"fRequired":[],"fEnum":[],"fType":"string","fProperties":[],"fOneOf":[],"fNullable":false,"fReadOnly":false,"fWriteOnly":false,"fDeprecated":false,"fGlideType":"string"}],"fOneOf":[],"fAdditionalProperties":{"value":{"fExclusiveMaximum":false,"fExclusiveMinimum":false,"fUniqueItems":false,"fRequired":[],"fEnum":[],"fType":"string","fProperties":[],"fOneOf":[],"fFormat":"binary","fNullable":false,"fReadOnly":false,"fWriteOnly":false,"fDeprecated":false,"fGlideType":"file_attachment"}},"fNullable":false,"fReadOnly":false,"fWriteOnly":false,"fDeprecated":false,"fGlideType":"object"}}]},"fResponses":[{"fStatusCode":"200","fDescription":"OK","fContents":[{"fMediaType":"application/json","fSchema":{"fName":"responseapplicationjson0548774573","fReferencedName":"#/components/schemas/UploadResponse","fExclusiveMaximum":false,"fExclusiveMinimum":false,"fUniqueItems":false,"fRequired":[],"fEnum":[],"fProperties":[],"fOneOf":[],"fNullable":false,"fReadOnly":false,"fWriteOnly":false,"fDeprecated":false,"fGlideType":"object"}}],"fHeaders":[]},{"fStatusCode":"400","fDescription":"Bad Request","fContents":[{"fMediaType":"application/json","fSchema":{"fName":"responseapplicationjson4627686876","fReferencedName":"#/components/schemas/ErrorResponse","fExclusiveMaximum":false,"fExclusiveMinimum":false,"fUniqueItems":false,"fRequired":[],"fEnum":[],"fProperties":[],"fOneOf":[],"fNullable":false,"fReadOnly":false,"fWriteOnly":false,"fDeprecated":false,"fGlideType":"object"}}],"fHeaders":[]},{"fStatusCode":"401","fDescription":"Unauthorized","fContents":[{"fMediaType":"application/json","fSchema":{"fName":"responseapplicationjson7870843349","fReferencedName":"#/components/schemas/UnauthorizedErrorResponse","fExclusiveMaximum":false,"fExclusiveMinimum":false,"fUniqueItems":false,"fRequired":[],"fEnum":[],"fProperties":[],"fOneOf":[],"fNullable":false,"fReadOnly":false,"fWriteOnly":false,"fDeprecated":false,"fGlideType":"object"}}],"fHeaders":[]},{"fStatusCode":"403","fDescription":"Forbidden","fContents":[{"fMediaType":"application/json","fSchema":{"fName":"responseapplicationjson6616584081","fReferencedName":"#/components/schemas/ForbiddenErrorResponse","fExclusiveMaximum":false,"fExclusiveMinimum":false,"fUniqueItems":false,"fRequired":[],"fEnum":[],"fProperties":[],"fOneOf":[],"fNullable":false,"fReadOnly":false,"fWriteOnly":false,"fDeprecated":false,"fGlideType":"object"}}],"fHeaders":[]},{"fStatusCode":"500","fDescription":"Internal Server Error","fContents":[{"fMediaType":"application/json","fSchema":{"fName":"responseapplicationjson2176415694","fReferencedName":"#/components/schemas/ErrorResponse","fExclusiveMaximum":false,"fExclusiveMinimum":false,"fUniqueItems":false,"fRequired":[],"fEnum":[],"fProperties":[],"fOneOf":[],"fNullable":false,"fReadOnly":false,"fWriteOnly":false,"fDeprecated":false,"fGlideType":"object"}}],"fHeaders":[]}],"fParameters":[]}</serialized_operation>
        <sys_class_name>sys_openapi_operation</sys_class_name>
        <sys_created_by>eugene</sys_created_by>
        <sys_created_on>2022-05-21 23:39:23</sys_created_on>
        <sys_id>d8774a2297a74910e47578971153af5f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Store an ERC-1155 compatible NFT</sys_name>
        <sys_package display_value="nft.storage" source="x_snc_nft_storage">86a5ceae97674910e47578971153af49</sys_package>
        <sys_policy/>
        <sys_scope display_value="nft.storage">86a5ceae97674910e47578971153af49</sys_scope>
        <sys_update_name>sys_openapi_operation_d8774a2297a74910e47578971153af5f</sys_update_name>
        <sys_updated_by>eugene</sys_updated_by>
        <sys_updated_on>2022-05-21 23:39:23</sys_updated_on>
    </sys_openapi_operation>
</record_update>
